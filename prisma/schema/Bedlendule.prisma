model User {
  id                Int          @id @default(autoincrement())
  type              UserTypeEnum
  uuid              String       @unique
  username          String       @unique
  password          String
  email             String       @unique
  phoneNumber       String       @unique
  firstName         String
  lastName          String
  licenseId         String?      @unique
  reviews           Review[]
  background        String?
  requests          Request[]
  schedules         Schedule[]
  profilePictureUrl String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  review    String?
  score     Float
  doctor    User     @relation(fields: [doctorId], references: [id])
  doctorId  Int
  request   Request? @relation(fields: [requestId], references: [id])
  requestId Int?      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Request {
  id             Int             @id @default(autoincrement())
  title          String
  description    String?
  problemType    ProblemTypeEnum
  price          Float
  meetingType    MeetingTypeEnum
  location       String?
  startTime      DateTime
  finishTime     DateTime
  patient        User            @relation(fields: [patientUUID], references: [uuid])
  patientUUID    String
  doctorTimeslot DoctorTimeslot?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  review         Review?
}

enum ProblemTypeEnum {
  MENTAL_HEALTH
  DEPRESSION
  PANIC_DISORDER
  SCHIZOPHRENIA
  POST_TRAUMATIC_STRESS_DISORDER
  BIPOLAR
  DEMENTIA
  OTHER
  PHOBIAS
}

model Schedule {
  id          Int              @id @default(autoincrement())
  doctorUUID  User             @relation(fields: [uuid], references: [uuid])
  uuid        String
  title       String?          @default("title")
  description String?
  meetingType MeetingTypeEnum  @default(ONLINE)
  location    String?
  timeslots   DoctorTimeslot[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model DoctorTimeslot {
  id         Int      @id @default(autoincrement())
  request    Request? @relation(fields: [requestId], references: [id])
  requestId  Int?     @unique
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId Int
  startTime  DateTime
  finishTime DateTime
  price      Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum MeetingTypeEnum {
  ONLINE
  OFFLINE
}

enum UserTypeEnum {
  PATIENT
  DOCTOR
}
